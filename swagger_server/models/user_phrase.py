# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server.models.phrase import Phrase  # noqa: F401,E501
from swagger_server.models.user import User  # noqa: F401,E501
from swagger_server import util


class UserPhrase(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, id: int=None, user: User=None, phrase: Phrase=None, recording: object=None, recording_series: int=None, _date: str=None, file_path: str=None):  # noqa: E501
        """UserPhrase - a model defined in Swagger

        :param id: The id of this UserPhrase.  # noqa: E501
        :type id: int
        :param user: The user of this UserPhrase.  # noqa: E501
        :type user: User
        :param phrase: The phrase of this UserPhrase.  # noqa: E501
        :type phrase: Phrase
        :param recording: The recording of this UserPhrase.  # noqa: E501
        :type recording: object
        :param recording_series: The recording_series of this UserPhrase.  # noqa: E501
        :type recording_series: int
        :param _date: The _date of this UserPhrase.  # noqa: E501
        :type _date: str
        :param file_path: The file_path of this UserPhrase.  # noqa: E501
        :type file_path: str
        """
        self.swagger_types = {
            'id': int,
            'user': User,
            'phrase': Phrase,
            'recording': object,
            'recording_series': int,
            '_date': str,
            'file_path': str
        }

        self.attribute_map = {
            'id': 'id',
            'user': 'user',
            'phrase': 'phrase',
            'recording': 'recording',
            'recording_series': 'recordingSeries',
            '_date': 'date',
            'file_path': 'filePath'
        }
        self._id = id
        self._user = user
        self._phrase = phrase
        self._recording = recording
        self._recording_series = recording_series
        self.__date = _date
        self._file_path = file_path

    @classmethod
    def from_dict(cls, dikt) -> 'UserPhrase':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The UserPhrase of this UserPhrase.  # noqa: E501
        :rtype: UserPhrase
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self) -> int:
        """Gets the id of this UserPhrase.


        :return: The id of this UserPhrase.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id: int):
        """Sets the id of this UserPhrase.


        :param id: The id of this UserPhrase.
        :type id: int
        """

        self._id = id

    @property
    def user(self) -> User:
        """Gets the user of this UserPhrase.


        :return: The user of this UserPhrase.
        :rtype: User
        """
        return self._user

    @user.setter
    def user(self, user: User):
        """Sets the user of this UserPhrase.


        :param user: The user of this UserPhrase.
        :type user: User
        """

        self._user = user

    @property
    def phrase(self) -> Phrase:
        """Gets the phrase of this UserPhrase.


        :return: The phrase of this UserPhrase.
        :rtype: Phrase
        """
        return self._phrase

    @phrase.setter
    def phrase(self, phrase: Phrase):
        """Sets the phrase of this UserPhrase.


        :param phrase: The phrase of this UserPhrase.
        :type phrase: Phrase
        """

        self._phrase = phrase

    @property
    def recording(self) -> object:
        """Gets the recording of this UserPhrase.

        The actual recorded sound file  # noqa: E501

        :return: The recording of this UserPhrase.
        :rtype: object
        """
        return self._recording

    @recording.setter
    def recording(self, recording: object):
        """Sets the recording of this UserPhrase.

        The actual recorded sound file  # noqa: E501

        :param recording: The recording of this UserPhrase.
        :type recording: object
        """

        self._recording = recording

    @property
    def recording_series(self) -> int:
        """Gets the recording_series of this UserPhrase.


        :return: The recording_series of this UserPhrase.
        :rtype: int
        """
        return self._recording_series

    @recording_series.setter
    def recording_series(self, recording_series: int):
        """Sets the recording_series of this UserPhrase.


        :param recording_series: The recording_series of this UserPhrase.
        :type recording_series: int
        """

        self._recording_series = recording_series

    @property
    def _date(self) -> str:
        """Gets the _date of this UserPhrase.


        :return: The _date of this UserPhrase.
        :rtype: str
        """
        return self.__date

    @_date.setter
    def _date(self, _date: str):
        """Sets the _date of this UserPhrase.


        :param _date: The _date of this UserPhrase.
        :type _date: str
        """

        self.__date = _date

    @property
    def file_path(self) -> str:
        """Gets the file_path of this UserPhrase.


        :return: The file_path of this UserPhrase.
        :rtype: str
        """
        return self._file_path

    @file_path.setter
    def file_path(self, file_path: str):
        """Sets the file_path of this UserPhrase.


        :param file_path: The file_path of this UserPhrase.
        :type file_path: str
        """

        self._file_path = file_path
